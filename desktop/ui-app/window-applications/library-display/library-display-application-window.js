import ApplicationWindow from '../../components/application-components/application-window.js'
import {
    UIButton, UIProgress, UISelect, UISlider, UIStepper, UITab, UITabBarView, UITextEditView, 
    UITextField, UITextLabel, UITextView, UIToggle, UIView, UISizeMode, UIColor, UIRect, 
    UITextFormat, UIListView, UIListItem, UIBorder, UIOffset
} from '../../../ui-tool-kit/index.js'
import { UIStepperConfiguration, UISliderConfiguration, UIToggleConfiguration, UIButtonConfiguration, UITextFieldConfiguration, UITextEditViewConfiguration, UIProgressConfiguration, UISelectConfiguration } from './ui-configurations.js'
import UIComponentDisplay from './ui-component-display.js'
import SystemUIFont from '../../config/fonts.js'

const resize = (context) => {
    context.container.frame = new UIRect(0, 0, context.window.body.frame.width, context.window.body.frame.height);
}

export class LibraryDisplayApplicationWindow extends ApplicationWindow {
    _init() {
        super._init();

        this.container = new UIView({
            frame: new UIRect(0, 0, this.window.body.frame.width, this.window.body.frame.height),
            widthMode: UISizeMode.frameSize,
            heightMode: UISizeMode.frameSize,
            initialPosition: false
        })
        this.container
            .getUIElement()
            .setOverflowAuto();

        this.descriptionContainer = new UITextView({
            text: `Everything you see on this web page was created using components from my custom library. 
            I call it - "UIToolKit". Not a very distinct name, but who cares...
            I created it with sole purpose of doing this project. 
            Below you can see some of the components listed, their description (generated by GPT) and examples of how they look with some styling. 
            (You better not see how they look without).
            Made by Sanyadude.
            For Sanyadude.`,
            padding: new UIOffset(10),
            font: SystemUIFont.xxxLarge
        });

        this.view = new UIView({
            frame: new UIRect(0, 0, 200, 50),
            widthMode: UISizeMode.frameSize,
            heightMode: UISizeMode.frameSize,
            backgroundColor: new UIColor(.06, .52, .98, .1),
            border: new UIBorder(1, new UIColor(.06, .52, .98))
        });
        const viewDescription = `UIView 
provides a rectangular area on the screen for arranging other UI components 
such as buttons, text fields, images, and more. 
It acts as a foundational building block for creating interfaces.`;
        this.viewDisplay = new UIComponentDisplay('View', viewDescription, this.view);

        this.textView = new UITextView({
            textFormat: UITextFormat.preserved,
            text: `Text View Row 1 
        Text View Row 2
            Text View Row 3
                Text View Row 4`
        });
        const textViewDescription = `UITextView 
designed for displaying multiline text. 
It serves as a versatile container for presenting and viewing textual information. 
This component is useful when you need to incorporate areas in your user interface 
that can show longer passages of text, such as descriptions, comments, 
or other content that spans multiple lines.
`;
        this.textViewDisplay = new UIComponentDisplay('Text View', textViewDescription, this.textView);

        this.textLabel = new UITextLabel({ text: 'TextLabel' });
        const textLabelDescription = `UITextLabel 
used for displaying a single line of text. 
This component is primarily focused on presenting concise and informative textual content within a user interface. 
It is often utilized for labels, captions, 
or any scenario where a short piece of text needs to be prominently displayed.
`;
        this.textLabelDisplay = new UIComponentDisplay('Text Label', textLabelDescription, this.textLabel);

        this.button = new UIButton({
            title: 'Button',
            onClick: (uiComponent, uiElement, event) => {
                console.log(uiComponent);
            },
        });
        this.button.setConfiguration(UIButtonConfiguration.IOS);
        const buttonDescription = `UIButton 
represents a clickable area that users can interact with. It typically appears as a graphical 
element with text or an icon and serves as a trigger for actions when tapped or clicked.
`;
        this.buttonDisplay = new UIComponentDisplay('Button', buttonDescription, this.button);

        this.toggle = new UIToggle({
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        });
        this.toggle.setConfiguration(UIToggleConfiguration.IOS);
        const toggleDescription = `UIToggle 
represents a binary switch or toggle functionality. 
This component allows users to change between two states, such as on/off, enabled/disabled, 
or toggling between different modes, by interacting with the toggle control.
`;
        this.toggleDisplay = new UIComponentDisplay('Toggle', toggleDescription, this.toggle);

        this.progress = new UIProgress({
            onProgress: (value, uiComponent, uiElement) => {
                console.log(value);
            },
            progress: 50
        });
        this.progress.setConfiguration(UIProgressConfiguration.IOS);
        const progressDescription = `UIProgress 
visually represents the progress or completion of a task or operation. 
This component is designed to provide feedback to users about the status of a process, 
such as file downloads, data uploads, 
or any operation that takes time to complete.`;
        this.progressDisplay = new UIComponentDisplay('Progress', progressDescription, this.progress);

        this.stepper = new UIStepper({
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        });
        this.stepper.setConfiguration(UIStepperConfiguration.IOS);
        const stepperDescription = `UIStepper 
provides a simple way for users to increment or decrement a numeric value through predefined steps. 
This component consists of two buttons, one for increasing the value and another for decreasing it, 
along with a display area that shows the current selected value.`;
        this.stepperDisplay = new UIComponentDisplay('Stepper', stepperDescription, this.stepper);

        this.slider = new UISlider({
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        });
        this.slider.setConfiguration(UISliderConfiguration.IOS);
        const sliderDescription = `UISlider 
allows users to select a value 
from a continuous range by sliding or dragging a thumb control along a track. 
This interactive component is often used to gather input 
or enable users to adjust settings within an application.`;
        this.sliderDisplay = new UIComponentDisplay('Slider', sliderDescription, this.slider);

        this.select = new UISelect({
            options: ['Option 1', 'Option 2', 'Option 3', 'Option 4', 'Option 5'],
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        })
        this.select.setConfiguration(UISelectConfiguration.IOS);
        const selectDescription = `UISelect 
allows users to choose from a list of options. 
This component typically presents a closed list, and when clicked or tapped, 
it expands to display available choices. Users can then select a specific option from the expanded list.`;
        this.selectDisplay = new UIComponentDisplay('Select', selectDescription, this.select);

        this.textField = new UITextField({
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        });
        this.textField.setConfiguration(UITextFieldConfiguration.IOS);
        this.textField.frame = new UIRect(0, 0, 300, 100);
        this.textField.setWidthMode(UISizeMode.frameSize);
        const textFieldDescription = `UITextField 
allows users to input single-line text. 
This versatile component is commonly used for capturing textual information, 
such as usernames, passwords, search queries, 
or any other single-line input within an application.`;
        this.textFieldDisplay = new UIComponentDisplay('Text Input', textFieldDescription, this.textField);

        this.textEditView = new UITextEditView({
            onValueChanged: (value, uiComponent, uiElement, event) => {
                console.log(value);
            }
        });
        this.textEditView.setConfiguration(UITextEditViewConfiguration.IOS);
        this.textEditView.frame = new UIRect(0, 0, 300, 100);
        this.textEditView.setFrameSize();
        const textEditViewDescription = `UITextEditView 
is for displaying and editing multiple lines of text. 
This type of component is useful for scenarios 
where users need to input or view more extensive textual content, 
such as paragraphs or comments.`;
        this.textEditViewDisplay = new UIComponentDisplay('Text Edit View', textEditViewDescription, this.textEditView);

        const tabs = [
            {
                text: 'First Tab',
                onClick: (tabItem, uiComponent, uiElement, event) => {
                    console.log(tabItem.index);
                }
            },
            {
                text: 'Second Tab',
                onClick: (tabItem, uiComponent, uiElement, event) => {
                    console.log(tabItem.index);
                }
            },
            {
                text: 'Third Tab',
                onClick: (tabItem, uiComponent, uiElement, event) => {
                    console.log(tabItem.index);
                }
            }
        ];
        this.tabBar = new UITabBarView({
            isVertical: false
        });
        tabs.forEach(tabConfig => {
            const tab = new UITab({
                activeBackgroundColor: new UIColor(.06, .52, .98, .1),
                activeBorderColor: new UIColor(.06, .52, .98),
                inactiveBackgroundColor: null,
                inactiveBorderColor: UIColor.transparent,
                border: new UIBorder(1, UIColor.transparent)
            });
            const button = new UIButton({
                title: tabConfig.text,
                onClick: tabConfig.onClick.bind(window, tab),
                padding: new UIOffset(6),
                textColor: new UIColor(.06, .52, .98)
            })
            tab.addSubview(button);
            this.tabBar.addSubview(tab)
        })
        const tabBarDescription = `UITabBarView 
is used to implement a tab-based navigation system. 
It typically appears at the bottom of the screen and allows users 
to switch between different sections or views within an application.`;
        this.tabBarDisplay = new UIComponentDisplay('Tab Bar View', tabBarDescription, this.tabBar);

        const listItems = [
            {
                title: 'First List Item',
                onClick: (uiListItem, uiComponent, uiElement, event) => {
                    console.log(uiListItem.index);
                }
            },
            {
                title: 'Second List Item',
                onClick: (uiListItem, uiComponent, uiElement, event) => {
                    console.log(uiListItem.index);
                }
            },
            {
                title: 'Third List Item',
                onClick: (uiListItem, uiComponent, uiElement, event) => {
                    console.log(uiListItem.index);
                }
            }
        ]
        this.list = new UIListView({
            isVertical: true
        });
        listItems.forEach(listItem => {
            const item = new UIListItem({
                backgroundColor: new UIColor(.06, .52, .98, .1),
                border: new UIBorder(1, new UIColor(.06, .52, .98)),
                textColor: new UIColor(.06, .52, .98),
                padding: new UIOffset(6),
                maring: new UIOffset(2)
            });
            const button = new UIButton({
                title: listItem.title,
                onClick: listItem.onClick.bind(window, item)
            })
            item.addSubview(button);
            this.list.addSubview(item)
        })
        const listViewDescription = `UIListView 
presenting a collection of menu options within an application. 
This dynamic component provides a visually organized list, 
each item representing a distinct menu option. 
Users can easily navigate through the menu, making selections from the presented options.`;
        this.listViewDisplay = new UIComponentDisplay('List View', listViewDescription, this.list);

        this.container
            .addSubview(this.descriptionContainer)
            .addSubview(this.viewDisplay.container)
            .addSubview(this.textViewDisplay.container)
            .addSubview(this.textLabelDisplay.container)
            .addSubview(this.buttonDisplay.container)
            .addSubview(this.toggleDisplay.container)
            .addSubview(this.progressDisplay.container)
            .addSubview(this.stepperDisplay.container)
            .addSubview(this.sliderDisplay.container)
            .addSubview(this.selectDisplay.container)
            .addSubview(this.textFieldDisplay.container)
            .addSubview(this.textEditViewDisplay.container)
            .addSubview(this.tabBarDisplay.container)
            .addSubview(this.listViewDisplay.container)

        this.window.setBodyContent(this.container);

        this.window.onResize = () => {
            resize(this);
        }
        this.window.onMaximize = () => {
            resize(this);
        }
        this.window.onMaximizeRestore = () => {
            resize(this);
        }
    }
}

export default LibraryDisplayApplicationWindow